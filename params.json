{"name":"Xre","tagline":"XRE Xilinx Runtime Executer","body":"XRE\r\n===\r\n\r\nXRE - the Xilinx Runtime Executer.\r\n\r\nThis is an easy-to-customize BASH script for launching Xilinx executables\r\nfrom an installation of Xilinx ISE or EDK.\r\n\r\nThis script is intended to make it easier to use Xilinx's tools from the\r\ncommand line, particularly on Ubuntu or other Debian-based distributions\r\nfor which Xilinx's tools don't all work right out of the box.\r\n\r\nI'm currently using the script with great success on Ubuntu 13.04 64-bit.\r\n\r\nBasically, you edit the script to change a couple of variables in a \r\nblock at the beginning, and then you use it to launch Xilinx programs. \r\nThe script takes care of setting up the environment variables and linking\r\nin the right stdlibc++ to make everything work.\r\n\r\nOnce you set it up, launching ISE is as easy as running:\r\nxre ise\r\n\r\nIf you copy xre and modify it (say, to have two side-by-side installations),\r\nyou could run:\r\n\r\n> **xre14\\_5 ise** to start ISE 14.5 (once you've set up that copy of XRE)  \r\n> **xre12\\_3 ise** to start ISE 12.3 (ditto)  \r\n    ...etc.  \r\n\r\nIf you wanted to run the 32-bit tools for whatever reason, you could\r\nmake a copy of XRE, comment out the 64-bit group of variables,\r\nand uncomment the 32-bit group. Save the new one as xre_32 and the\r\noriginal as xre_64, and you're good to go for both versions.\r\n\r\nIf get bored with typing 'xre' all the time and you want to start\r\na shell, xre's got you covered. Just run:\r\n\r\n> **xre bash**, and you'll find yourself in a shell with all the Xilinx\r\nruntime variables set up and ready.  \r\n\r\nWhy?\r\n===\r\n\r\nXRE solves two problems.\r\n\r\n1) On Ubuntu and Debian 64-bit Linux, Xilinx's ISE toolset is kind of\r\nbroken as of the time of this writing. It's true that neither of the\r\ndistributions at listed on Xilinx's website as being ISE-compatible,\r\nbut Debian-based distributions make up a majority of Linux installations.\r\n\r\nThe only thing I found that needed fixing to make ISE Debian-compatible\r\nwas that the distro-supplied libstdc++ needed to be used instead of the\r\nISE-supplied copy.\r\n\r\nXRE takes care of this automagically by using LD\\_PRELOAD. It doesn't\r\nneed to change any files in your ISE installation.\r\n\r\n2) In a production FPGA environment, it can be important to keep the \"right\"\r\nversions of the tools around, for supporting legacy builds. XRE allows you\r\nto easily change from one tool version to the next (either by editing your\r\nXRE script file, or by having copies that are configured for different\r\ninstallations)\r\n\r\nHow?\r\n===\r\n\r\nUsing XRE is simple. Three easy steps.\r\n\r\n1. Download it. It's a script file.\r\n2. Open it in a text editor and change the variables to match your computer.\r\n3. Rename it to whatever you want and put it in your path.\r\n4. There is no step 4. Use it to launch Xilinx stuff.\r\n\r\n\r\nXRE uses a block of settings to configure itself. You'll want to change\r\nthose settings for your own machine. On my machine (running ISE 14.5 / \r\nXUbuntu 13.04 64-bit), my settings are:\r\n\r\n    XILINX=\"/opt/Xilinx/14.5/ISE_DS\"\r\n       \r\n    LIB_PATH=\"/usr/lib/x86_64-linux-gnu\"\r\n    LIBSTDC=\"libstdc++.so.6\"\r\n    SETTINGS=\"settings64.sh\"\r\n    PRELOAD_NAME=\"LD_PRELOAD\"\r\n    RUNTIME_PREFIX=\"linux64\"\r\n\r\nIf I wanted to set it up for 32-bit, I'd keep my Xilinx path the same,\r\nbut I'd change the rest of the variables accordingly:\r\n\r\n    LIB_PATH=\"/usr/lib/i386-linux-gnu\"\r\n    LIBSTDC=\"libstdc++.so.6\"\r\n    SETTINGS=\"settings32.sh\"\r\n    PRELOAD_NAME=\"LD_PRELOAD_32\"\r\n    RUNTIME_PREFIX=\"linux32\"\r\n\r\n\r\n\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}